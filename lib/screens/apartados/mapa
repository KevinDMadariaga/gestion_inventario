import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:gestion_inventario/services/mongo_service.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';

class AgregarProductoPage extends StatefulWidget {
  const AgregarProductoPage({super.key});

  @override
  State<AgregarProductoPage> createState() => _AgregarProductoPageState();
}

class _AgregarProductoPageState extends State<AgregarProductoPage> {
  final _formKey = GlobalKey<FormState>();

  // Campos del producto
  String? nombre, talla, categoria;
  double? precioCompra, precioVenta, precioDescuento;
  DateTime fechaRegistro = DateTime.now();

  // Controllers para chips de talla/categoría
  final _tallaCtrl = TextEditingController();
  final _categoriaCtrl = TextEditingController();

  // Sugerencias
  static const List<String> _tallasSugeridas = ['XS', 'S', 'M', 'L', 'XL', 'Única'];
  static const List<String> _categoriasSugeridas = [
    'Camisa', 'Blusa', 'Pantalón', 'Jean', 'Vestido', 'Chaqueta', 'Zapatos', 'Accesorios'
  ];

  // Imagen
  File? _foto;
  final picker = ImagePicker();

  // Estado UI
  bool _guardando = false;
  final _fmtFecha = DateFormat('dd/MM/yyyy');

  // Colores de marca (degradado)
  static const brandA = Color(0xFFFF7A18);
  static const brandB = Color(0xFFFFC837);

  @override
  void dispose() {
    _tallaCtrl.dispose();
    _categoriaCtrl.dispose();
    super.dispose();
  }

  // ---------- Helpers ----------
  /// Acepta entradas con separadores de miles/punto/coma (p.ej. "10.000", "10,5", "10000.50")
  double? _parseNumber(String? v) {
    if (v == null) return null;
    final s = v.trim().replaceAll('.', '').replaceAll(',', '.');
    if (s.isEmpty) return null;
    return double.tryParse(s);
  }

  Future<void> _pickImage() async {
    final source = await showDialog<ImageSource>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Selecciona origen'),
        content: const Text('¿Desde dónde quieres cargar la foto?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, ImageSource.camera),
            child: const Text('Cámara'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, ImageSource.gallery),
            child: const Text('Galería'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, null),
            child: const Text('Cancelar'),
          ),
        ],
      ),
    );
    if (source != null) {
      final pickedFile = await picker.pickImage(
        source: source,
        imageQuality: 75,
        maxWidth: 1280,
      );
      if (pickedFile != null) {
        setState(() => _foto = File(pickedFile.path));
      }
    }
  }

  Future<void> _agregarProducto() async {
    if (!_formKey.currentState!.validate()) return;
    FocusScope.of(context).unfocus();
    _formKey.currentState!.save();

    // Si el usuario eligió desde chips, garantizamos ese valor
    talla = (_tallaCtrl.text.trim().isEmpty) ? talla : _tallaCtrl.text.trim();
    categoria = (_categoriaCtrl.text.trim().isEmpty) ? categoria : _categoriaCtrl.text.trim();

    setState(() => _guardando = true);
    try {
      String? fotoBase64;
      if (_foto != null && await _foto!.exists()) {
        final bytes = await _foto!.readAsBytes();
        fotoBase64 = base64Encode(bytes);
      }

      final producto = {
        'nombre': nombre,
        'talla': talla,
        'precioCompra': precioCompra,
        'precioVenta': precioVenta,
        'precioDescuento': precioDescuento,
        'categoria': categoria,
        'fechaRegistro': fechaRegistro.toIso8601String(),
        // Guardamos ambas por compatibilidad; usa fotoBase64 para mostrar
        'foto': _foto?.path ?? '',
        'fotoBase64': fotoBase64 ?? '',
        'fotoMime': 'image/jpeg',
        'estado': 'disponible',
      };

      await MongoService().saveProduct(producto);

      if (!mounted) return;
      // Mensaje centrado de éxito
      await showDialog<void>(
        context: context,
        builder: (ctx) => AlertDialog(
          title: const Text('Producto agregado'),
          content: const Text('El producto ha sido guardado correctamente.'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(ctx).pop(),
              child: const Text('Aceptar'),
            ),
          ],
        ),
      );

      // Limpiar para nuevo registro SIN salir de la página
      setState(() {
        nombre = null;
        talla = null;
        categoria = null;
        precioCompra = null;
        precioVenta = null;
        precioDescuento = null;
        fechaRegistro = DateTime.now();
        _foto = null;
        _tallaCtrl.clear();
        _categoriaCtrl.clear();
        _formKey.currentState!.reset();
      });
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al guardar: $e')),
      );
    } finally {
      if (mounted) setState(() => _guardando = false);
    }
  }

  // ---------- Widgets de UI pequeños ----------
  Widget _sectionTitle(IconData icon, String text) {
    return Row(
      children: [
        Icon(icon, size: 18, color: Colors.grey[800]),
        const SizedBox(width: 8),
        Text(text, style: const TextStyle(fontWeight: FontWeight.w700)),
      ],
    );
  }

  InputDecoration _input(String label, {String? hint, Widget? prefixIcon}) {
    return InputDecoration(
      labelText: label,
      hintText: hint,
      prefixIcon: prefixIcon,
      isDense: true,
      filled: true,
      fillColor: Colors.white,
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
      contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
    );
  }

  Card _card({required Widget child, Color? color}) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      color: color ?? Colors.grey[50],
      child: Padding(padding: const EdgeInsets.all(14), child: child),
    );
  }

  Widget _chipsSugeridos({
    required String titulo,
    required List<String> items,
    required void Function(String value) onPick,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 8),
        Text(titulo, style: const TextStyle(fontWeight: FontWeight.w600)),
        const SizedBox(height: 6),
        Wrap(
          spacing: 8,
          runSpacing: 6,
          children: items
              .map(
                (v) => ActionChip(
                  label: Text(v),
                  onPressed: () => onPick(v),
                ),
              )
              .toList(),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text('Agregar producto', style: TextStyle(fontWeight: FontWeight.w700)),
        foregroundColor: Colors.white,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [brandA, brandB],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: SafeArea(
        child: LayoutBuilder(
          builder: (context, c) {
            final bool wide = c.maxWidth >= 900;

            final content = [
              _card(
                child: Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      _sectionTitle(Icons.inventory_2_outlined, 'Datos generales'),
                      const SizedBox(height: 10),
                      TextFormField(
                        decoration: _input('Nombre', prefixIcon: const Icon(Icons.badge_outlined)),
                        onSaved: (v) => nombre = v?.trim(),
                        validator: (v) =>
                            (v == null || v.trim().isEmpty) ? 'Ingrese el nombre' : null,
                      ),
                      const SizedBox(height: 10),
                      Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              controller: _tallaCtrl,
                              decoration:
                                  _input('Talla', prefixIcon: const Icon(Icons.straighten_outlined)),
                              onSaved: (v) => talla = v?.trim(),
                            ),
                          ),
                          const SizedBox(width: 10),
                          Expanded(
                            child: TextFormField(
                              controller: _categoriaCtrl,
                              decoration:
                                  _input('Categoría', prefixIcon: const Icon(Icons.category)),
                              onSaved: (v) => categoria = v?.trim(),
                            ),
                          ),
                        ],
                      ),
                      // Chips sugeridos debajo
                      _chipsSugeridos(
                        titulo: 'Tallas sugeridas',
                        items: _tallasSugeridas,
                        onPick: (v) {
                          _tallaCtrl.text = v;
                          setState(() {});
                        },
                      ),
                      _chipsSugeridos(
                        titulo: 'Categorías sugeridas',
                        items: _categoriasSugeridas,
                        onPick: (v) {
                          _categoriaCtrl.text = v;
                          setState(() {});
                        },
                      ),
                      const SizedBox(height: 10),
                      ListTile(
                        dense: true,
                        contentPadding: const EdgeInsets.symmetric(horizontal: 8),
                        leading: const Icon(Icons.calendar_today),
                        title: Text('Fecha de registro: ${_fmtFecha.format(fechaRegistro)}'),
                        trailing: const Icon(Icons.edit_calendar),
                        onTap: () async {
                          final picked = await showDatePicker(
                            context: context,
                            initialDate: fechaRegistro,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (picked != null) setState(() => fechaRegistro = picked);
                        },
                      ),
                    ],
                  ),
                ),
              ),

              _card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _sectionTitle(Icons.attach_money, 'Precios'),
                    const SizedBox(height: 10),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            decoration: _input('Precio de compra', prefixIcon: const Icon(Icons.sell)),
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            inputFormatters: [
                              FilteringTextInputFormatter.allow(RegExp(r'[0-9,.\s]')),
                            ],
                            onSaved: (v) => precioCompra = _parseNumber(v),
                            validator: (v) =>
                                (v == null || v.isEmpty) ? 'Ingrese el precio de compra' : null,
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          child: TextFormField(
                            decoration:
                                _input('Precio de venta', prefixIcon: const Icon(Icons.point_of_sale)),
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            inputFormatters: [
                              FilteringTextInputFormatter.allow(RegExp(r'[0-9,.\s]')),
                            ],
                            onSaved: (v) => precioVenta = _parseNumber(v),
                            validator: (v) =>
                                (v == null || v.isEmpty) ? 'Ingrese el precio de venta' : null,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    TextFormField(
                      decoration: _input('Precio descuento (opcional)',
                          prefixIcon: const Icon(Icons.discount)),
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      inputFormatters: [
                        FilteringTextInputFormatter.allow(RegExp(r'[0-9,.\s]')),
                      ],
                      onSaved: (v) => precioDescuento = _parseNumber(v),
                    ),
                  ],
                ),
              ),

              _card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _sectionTitle(Icons.photo_library_outlined, 'Foto'),
                    const SizedBox(height: 12),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Container(
                            width: 92,
                            height: 92,
                            color: Colors.grey[200],
                            child: _foto != null
                                ? Image.file(_foto!, fit: BoxFit.cover, width: 92, height: 92)
                                : const Icon(Icons.photo, size: 40, color: Colors.black38),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: FilledButton.tonalIcon(
                            onPressed: _guardando ? null : _pickImage,
                            icon: const Icon(Icons.add_a_photo),
                            label: const Text('Agregar foto'),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 2),
                child: SizedBox(
                  width: double.infinity,
                  child: ElevatedButton.icon(
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 16),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
                      backgroundColor: brandA,
                      foregroundColor: Colors.white,
                    ),
                    onPressed: _guardando ? null : _agregarProducto,
                    icon: _guardando
                        ? const SizedBox(
                            width: 18, height: 18,
                            child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                          )
                        : const Icon(Icons.save),
                    label: const Text(
                      'Guardar producto',
                      style: TextStyle(fontWeight: FontWeight.w700),
                    ),
                  ),
                ),
              ),
            ];

            if (wide) {
              // Dos columnas en pantallas anchas
              return Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Expanded(
                      child: ListView(
                        children: [
                          content[0],
                          const SizedBox(height: 12),
                          content[1],
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ListView(
                        children: [
                          content[2],
                          const SizedBox(height: 12),
                          content[3],
                        ],
                      ),
                    ),
                  ],
                ),
              );
            }

            // Una columna en móviles
            return ListView(
              padding: const EdgeInsets.all(16),
              children: [
                ...content.take(3),
                const SizedBox(height: 12),
                content[3],
              ],
            );
          },
        ),
      ),
    );
  }
}
